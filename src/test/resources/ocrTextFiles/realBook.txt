Clients neither know nor care about the class of the object they get back from the
factory; they care only that it is some subclass of EnumSet.
 
A fifth advantage of static factories is that the class of the returned object
need not exist when the class containing the method is written. Such flexible
static factory methods form the basis of service provider frameworks, like the Java
Database Connectivity API (JDBC). A service provider framework is a system in
which providers implement a service, and the system makes the implementations
available to clients, decoupling the clients from the implementations.
 
There are three essential components in a service provider framework: a service
interface, which represents an implementation; a provider registration
 
API, which providers use to register implementations; and a service access API,
which clients use to obtain instances of the service. The service access API may
allow clients to specify criteria for choosing an implementation. In the absence of
such criteria, the API returns an instance of a default implementation, or allows the
client to cycle through all available implementations. The service access API is the
flexible static factory that forms the basis of the service provider framework.
 
An optional fourth component of a service provider framework is a service
provider interface, which describes a factory object that produce instances of the
service interface. In the absence of a service provider interface, implementations
‘must be instantiated reflectively (Item 65). In the case of JDBC, Connection
 
plays the part of the service interface, DriverManager.registerDriver is the
provider registration API DriverManager.getConnection is the service access
API, and Driver is the service provider interface.
 
There are many variants of the service provider framework pattern. For example,
th service access API can return a richer service interface to clients than the
 
one furnished by providers. This is the Bridge pattern [Gamma95]. Dependency
injection frameworks (Item 5) can be viewed as powerful service providers. Since
Java 6, the platform includes a general-purpose service provider framework,
java.util.ServiceLoader, so you needn’t, and generally shouldn't, write your